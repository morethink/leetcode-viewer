{"java":"class Solution {\n public int numDecodings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int n = s.length();\n        char[] c = s.toCharArray();\n        // 对于台阶，需要前两步的值，所以数组最小是3\n        int[] step = new int[Math.max(n + 1, 3)];\n        step[0] = 1;\n        step[1] = 0;\n        // 第一个字符不是0，则第一步初始为1\n        if (c[0] != '0') {\n            step[1] = 1;\n        }\n        // step[i] = step[i - 1] + step[i - 2];\n        // 只不过加step[i - 2]时，需要对c[i - 2]和c[i - 1]判断，组合是否<=26\n        for (int i = 2; i <= n; i++) {\n            step[i] = 0;\n            if (c[i - 1] != '0') {\n                step[i] += step[i - 1];\n            }\n            if (c[i - 2] != '0') {\n                if ((c[i - 2] - '0') * 10 + (c[i - 1] - '0') <= 26) {\n                    step[i] += step[i - 2];\n                }\n            }\n        }\n        return step[n];\n    }\n}"}