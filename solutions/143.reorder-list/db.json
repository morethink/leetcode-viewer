{"java":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n      /**\n     * 通过快慢指针找到中间节点，拆分链表为两部分，将后半部分链表翻转，然后合并两部分\n     *\n     * @param head\n     */\n    public void reorderList(ListNode head) {\n        if (head == null || head.next == null) {\n            return;\n        }\n        //快慢指针找到中间节点\n        ListNode slow = head, fast = head, temp = null;\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        //拆分链表为两部分\n        temp = slow.next;\n        slow.next = null;\n        slow = temp;\n\n        //后半边进行头插法，翻转链表\n        ListNode node = slow.next;\n        slow.next = null;\n        while (node != null) {\n            temp = node.next;\n            node.next = slow;\n            slow = node;\n            node = temp;\n\n        }\n        //合并链表\n        merge(head, slow);\n    }\n\n    public void merge(ListNode head1, ListNode head2) {\n        ListNode p = head1, q = head2, temp;\n        while (p != null && q != null) {\n            temp = p.next;\n            p.next = q;\n            p = temp;\n            temp = q.next;\n            q.next = p;\n            q = temp;\n\n        }\n    }\n}"}