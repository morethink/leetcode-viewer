{"java":"class Solution {\n   public List<String> wordBreak(String s, List<String> wordDict) {\n        return DFS(s, wordDict, new HashMap<String, ArrayList<String>>());\n    }\n\n    // DFS function returns an array including all substrings derived from s.\n    List<String> DFS(String s, List<String> wordDict, HashMap<String, ArrayList<String>> map) {\n        if (map.containsKey(s))\n            return map.get(s);\n\n        ArrayList<String> res = new ArrayList<String>();\n        if (s.length() == 0) {\n            res.add(\"\");\n            return res;\n        }\n        for (String word : wordDict) {\n            if (s.startsWith(word)) {\n                List<String> sublist = DFS(s.substring(word.length()), wordDict, map);\n                for (String sub : sublist)\n                    res.add(word + (sub.isEmpty() ? \"\" : \" \") + sub);\n            }\n        }\n        map.put(s, res);\n        return res;\n    }\n}"}